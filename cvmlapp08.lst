
AVRASM ver. 2.1.17  D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm Thu Apr 19 11:34:50 2012

D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm(1016): warning: Register r5 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm(1017): warning: Register r4 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm(1018): warning: Register r7 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm(1019): warning: Register r6 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm(1020): warning: Register r9 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm(1021): warning: Register r8 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmlapp08.asm(1022): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.9 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega32
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 3,686400 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : Yes
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF _indata=R11
                 
                 	.CSEG
                 	.ORG 0x3E00
                 
                 ;INTERRUPT VECTORS
003e00 940c 3e39 	JMP  __RESET
003e02 940c 3e00 	JMP  0x3E00
003e04 940c 3e00 	JMP  0x3E00
003e06 940c 3e00 	JMP  0x3E00
003e08 940c 3e00 	JMP  0x3E00
003e0a 940c 3e00 	JMP  0x3E00
003e0c 940c 3e00 	JMP  0x3E00
003e0e 940c 3e00 	JMP  0x3E00
003e10 940c 3e00 	JMP  0x3E00
003e12 940c 3e00 	JMP  0x3E00
003e14 940c 3e00 	JMP  0x3E00
003e16 940c 3e00 	JMP  0x3E00
003e18 940c 3e00 	JMP  0x3E00
003e1a 940c 3e6a 	JMP  _usart_rx_isr
003e1c 940c 3e00 	JMP  0x3E00
003e1e 940c 3e9c 	JMP  _usart_tx_isr
003e20 940c 3e00 	JMP  0x3E00
003e22 940c 3e00 	JMP  0x3E00
003e24 940c 3e00 	JMP  0x3E00
003e26 940c 3e00 	JMP  0x3E00
003e28 940c 3e00 	JMP  0x3E00
                 
                 _tbl10_G100:
003e2a 2710
003e2b 03e8
003e2c 0064
003e2d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
003e2e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
003e2f 1000
003e30 0100
003e31 0010
003e32 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x14:
003e33 d311
003e34 437b      	.DB  0x11,0xD3,0x7B,0x43
                 
                 __GLOBAL_INI_TBL:
003e35 0004      	.DW  0x04
003e36 02a0      	.DW  _lockcode
003e37 7c66      	.DW  _0x14*2
                 
                 _0xFFFFFFFF:
003e38 0000      	.DW  0
                 
                 __RESET:
003e39 94f8      	CLI
003e3a 27ee      	CLR  R30
003e3b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
003e3c e0f1      	LDI  R31,1
003e3d bffb      	OUT  GICR,R31
003e3e e0f2      	LDI  R31,2
003e3f bffb      	OUT  GICR,R31
003e40 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
003e41 e1f8      	LDI  R31,0x18
003e42 bdf1      	OUT  WDTCR,R31
003e43 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
003e44 e08d      	LDI  R24,(14-2)+1
003e45 e0a2      	LDI  R26,2
003e46 27bb      	CLR  R27
                 __CLEAR_REG:
003e47 93ed      	ST   X+,R30
003e48 958a      	DEC  R24
003e49 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
003e4a e080      	LDI  R24,LOW(0x800)
003e4b e098      	LDI  R25,HIGH(0x800)
003e4c e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
003e4d 93ed      	ST   X+,R30
003e4e 9701      	SBIW R24,1
003e4f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
003e50 e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
003e51 e7fc      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
003e52 9185      	LPM  R24,Z+
003e53 9195      	LPM  R25,Z+
003e54 9700      	SBIW R24,0
003e55 f061      	BREQ __GLOBAL_INI_END
003e56 91a5      	LPM  R26,Z+
003e57 91b5      	LPM  R27,Z+
003e58 9005      	LPM  R0,Z+
003e59 9015      	LPM  R1,Z+
003e5a 01bf      	MOVW R22,R30
003e5b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
003e5c 9005      	LPM  R0,Z+
003e5d 920d      	ST   X+,R0
003e5e 9701      	SBIW R24,1
003e5f f7e1      	BRNE __GLOBAL_INI_LOOP
003e60 01fb      	MOVW R30,R22
003e61 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
003e62 e5ef      	LDI  R30,LOW(0x85F)
003e63 bfed      	OUT  SPL,R30
003e64 e0e8      	LDI  R30,HIGH(0x85F)
003e65 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
003e66 e6c0      	LDI  R28,LOW(0x260)
003e67 e0d2      	LDI  R29,HIGH(0x260)
                 
003e68 940c 3ecd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project : Example application for use with CVmegaload
                 ;Version : 1.00
                 ;Date    : 16/05/2004
                 ;Author  : Ralph Hilton
                 ;
                 ;Chip type           : ATmega8
                 ;Program type        : Application
                 ;Clock frequency     : 7.372800 MHz
                 ;Data Stack size     : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define RXB8 1
                 ;#define TXB8 0
                 ;#define UPE 2
                 ;#define OVR 3
                 ;#define FE 4
                 ;#define UDRE 5
                 ;#define RXC 7
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<OVR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define RXEN    4            // Разрешение приема
                 ;#define TXEN    3            // Разрешение передачи
                 ;#define BAUDRATE 115200UL
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 32
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0030 {
                 
                 	.CSEG
                 _usart_rx_isr:
003e6a 93ea      	ST   -Y,R30
003e6b 93fa      	ST   -Y,R31
003e6c b7ef      	IN   R30,SREG
003e6d 93ea      	ST   -Y,R30
                 ; 0000 0031 char status,data;
                 ; 0000 0032 status=UCSRA;
003e6e 931a      	ST   -Y,R17
003e6f 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
003e70 b11b      	IN   R17,11
                 ; 0000 0033 data=UDR;
003e71 b10c      	IN   R16,12
                 ; 0000 0034 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
003e72 2fe1      	MOV  R30,R17
003e73 71ec      	ANDI R30,LOW(0x1C)
003e74 f489      	BRNE _0x3
                 ; 0000 0035    {
                 ; 0000 0036    rx_buffer[rx_wr_index]=data;
003e75 2de5      	MOV  R30,R5
003e76 e0f0      	LDI  R31,0
003e77 5ae0      	SUBI R30,LOW(-_rx_buffer)
003e78 4ffd      	SBCI R31,HIGH(-_rx_buffer)
003e79 8300      	ST   Z,R16
                 ; 0000 0037    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
003e7a 9453      	INC  R5
003e7b e2e0      	LDI  R30,LOW(32)
003e7c 15e5      	CP   R30,R5
003e7d f409      	BRNE _0x4
003e7e 2455      	CLR  R5
                 ; 0000 0038    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
003e7f 9473      	INC  R7
003e80 e2e0      	LDI  R30,LOW(32)
003e81 15e7      	CP   R30,R7
003e82 f419      	BRNE _0x5
                 ; 0000 0039       {
                 ; 0000 003A       rx_counter=0;
003e83 2477      	CLR  R7
                 ; 0000 003B       rx_buffer_overflow=1;
003e84 9468      	SET
003e85 f820      	BLD  R2,0
                 ; 0000 003C       };
                 _0x5:
                 ; 0000 003D    };
                 _0x3:
                 ; 0000 003E }
003e86 9109      	LD   R16,Y+
003e87 9119      	LD   R17,Y+
003e88 c025      	RJMP _0x21
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0045 {
                 _getchar:
                 ; 0000 0046     char data;
                 ; 0000 0047     while (rx_counter==0);
003e89 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
003e8a 2077      	TST  R7
003e8b f3f1      	BREQ _0x6
                 ; 0000 0048     data=rx_buffer[rx_rd_index];
003e8c 2de4      	MOV  R30,R4
003e8d e0f0      	LDI  R31,0
003e8e 5ae0      	SUBI R30,LOW(-_rx_buffer)
003e8f 4ffd      	SBCI R31,HIGH(-_rx_buffer)
003e90 8110      	LD   R17,Z
                 ; 0000 0049     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
003e91 9443      	INC  R4
003e92 e2e0      	LDI  R30,LOW(32)
003e93 15e4      	CP   R30,R4
003e94 f409      	BRNE _0x9
003e95 2444      	CLR  R4
                 ; 0000 004A     #asm("cli")
                 _0x9:
003e96 94f8      	cli
                 ; 0000 004B     --rx_counter;
003e97 947a      	DEC  R7
                 ; 0000 004C     #asm("sei")
003e98 9478      	sei
                 ; 0000 004D     return data;
003e99 2fe1      	MOV  R30,R17
003e9a 9119      	LD   R17,Y+
003e9b 9508      	RET
                 ; 0000 004E }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 32
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE<256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 005E {
                 _usart_tx_isr:
003e9c 93ea      	ST   -Y,R30
003e9d 93fa      	ST   -Y,R31
003e9e b7ef      	IN   R30,SREG
003e9f 93ea      	ST   -Y,R30
                 ; 0000 005F if (tx_counter)
003ea0 2088      	TST  R8
003ea1 f061      	BREQ _0xA
                 ; 0000 0060    {
                 ; 0000 0061    --tx_counter;
003ea2 948a      	DEC  R8
                 ; 0000 0062    UDR=tx_buffer[tx_rd_index];
003ea3 2de9      	MOV  R30,R9
003ea4 e0f0      	LDI  R31,0
003ea5 58e0      	SUBI R30,LOW(-_tx_buffer)
003ea6 4ffd      	SBCI R31,HIGH(-_tx_buffer)
003ea7 81e0      	LD   R30,Z
003ea8 b9ec      	OUT  0xC,R30
                 ; 0000 0063    if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
003ea9 9493      	INC  R9
003eaa e2e0      	LDI  R30,LOW(32)
003eab 15e9      	CP   R30,R9
003eac f409      	BRNE _0xB
003ead 2499      	CLR  R9
                 ; 0000 0064    };
                 _0xB:
                 _0xA:
                 ; 0000 0065 }
                 _0x21:
003eae 91e9      	LD   R30,Y+
003eaf bfef      	OUT  SREG,R30
003eb0 91f9      	LD   R31,Y+
003eb1 91e9      	LD   R30,Y+
003eb2 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 006C {
                 _putchar:
                 ; 0000 006D while (tx_counter == TX_BUFFER_SIZE);
                 ;	c -> Y+0
                 _0xC:
003eb3 e2e0      	LDI  R30,LOW(32)
003eb4 15e8      	CP   R30,R8
003eb5 f3e9      	BREQ _0xC
                 ; 0000 006E #asm("cli")
003eb6 94f8      	cli
                 ; 0000 006F if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
003eb7 2088      	TST  R8
003eb8 f411      	BRNE _0x10
003eb9 995d      	SBIC 0xB,5
003eba c00d      	RJMP _0xF
                 _0x10:
                 ; 0000 0070    {
                 ; 0000 0071    tx_buffer[tx_wr_index]=c;
003ebb 2de6      	MOV  R30,R6
003ebc e0f0      	LDI  R31,0
003ebd 58e0      	SUBI R30,LOW(-_tx_buffer)
003ebe 4ffd      	SBCI R31,HIGH(-_tx_buffer)
003ebf 81a8      	LD   R26,Y
003ec0 83a0      	STD  Z+0,R26
                 ; 0000 0072    if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
003ec1 9463      	INC  R6
003ec2 e2e0      	LDI  R30,LOW(32)
003ec3 15e6      	CP   R30,R6
003ec4 f409      	BRNE _0x12
003ec5 2466      	CLR  R6
                 ; 0000 0073    ++tx_counter;
                 _0x12:
003ec6 9483      	INC  R8
                 ; 0000 0074    }
                 ; 0000 0075 else
003ec7 c002      	RJMP _0x13
                 _0xF:
                 ; 0000 0076    UDR=c;
003ec8 81e8      	LD   R30,Y
003ec9 b9ec      	OUT  0xC,R30
                 ; 0000 0077 #asm("sei")
                 _0x13:
003eca 9478      	sei
                 ; 0000 0078 }
003ecb 9621      	ADIW R28,1
003ecc 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;const unsigned long int lockcode = 1132188433; // bytes 67,123,211,17 to bootload (43 7B D3 11)
                 
                 	.DSEG
                 ;unsigned long int checklockcode;
                 ;char indata;
                 ;
                 ;void main(void)
                 ; 0000 0084 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0085 	unsigned int  bauddiv;
                 ; 0000 0086     unsigned char dot = '.';
                 ; 0000 0087 
                 ; 0000 0088 PORTA=0x00; DDRA=0xFC;
                 ;	bauddiv -> R16,R17
                 ;	dot -> R19
003ecd e23e      	LDI  R19,46
003ece e0e0      	LDI  R30,LOW(0)
003ecf bbeb      	OUT  0x1B,R30
003ed0 efec      	LDI  R30,LOW(252)
003ed1 bbea      	OUT  0x1A,R30
                 ; 0000 0089 // Declare your local variables here
                 ; 0000 008A 
                 ; 0000 008B // Input/Output Ports initialization
                 ; 0000 008C // Port B initialization
                 ; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008F PORTB=0x00;
003ed2 e0e0      	LDI  R30,LOW(0)
003ed3 bbe8      	OUT  0x18,R30
                 ; 0000 0090 DDRB=0x00;
003ed4 bbe7      	OUT  0x17,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port C initialization
                 ; 0000 0093 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0094 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0095 PORTC=0x00;
003ed5 bbe5      	OUT  0x15,R30
                 ; 0000 0096 DDRC=0x00;
003ed6 bbe4      	OUT  0x14,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port D initialization
                 ; 0000 0099 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009B PORTD=0x00;
003ed7 bbe2      	OUT  0x12,R30
                 ; 0000 009C DDRD=0x20;
003ed8 e2e0      	LDI  R30,LOW(32)
003ed9 bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 0 initialization
                 ; 0000 009F // Clock source: System Clock
                 ; 0000 00A0 // Clock value: Timer 0 Stopped
                 ; 0000 00A1 TCCR0=0x00;
003eda e0e0      	LDI  R30,LOW(0)
003edb bfe3      	OUT  0x33,R30
                 ; 0000 00A2 TCNT0=0x00;
003edc bfe2      	OUT  0x32,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // Timer/Counter 1 initialization
                 ; 0000 00A5 // Clock source: System Clock
                 ; 0000 00A6 // Clock value: Timer 1 Stopped
                 ; 0000 00A7 // Mode: Normal top=FFFFh
                 ; 0000 00A8 // OC1A output: Discon.
                 ; 0000 00A9 // OC1B output: Discon.
                 ; 0000 00AA // Noise Canceler: Off
                 ; 0000 00AB // Input Capture on Falling Edge
                 ; 0000 00AC TCCR1A=0x00;
003edd bdef      	OUT  0x2F,R30
                 ; 0000 00AD TCCR1B=0x00;
003ede bdee      	OUT  0x2E,R30
                 ; 0000 00AE TCNT1H=0x00;
003edf bded      	OUT  0x2D,R30
                 ; 0000 00AF TCNT1L=0x00;
003ee0 bdec      	OUT  0x2C,R30
                 ; 0000 00B0 ICR1H=0x00;
003ee1 bde7      	OUT  0x27,R30
                 ; 0000 00B1 ICR1L=0x00;
003ee2 bde6      	OUT  0x26,R30
                 ; 0000 00B2 OCR1AH=0x00;
003ee3 bdeb      	OUT  0x2B,R30
                 ; 0000 00B3 OCR1AL=0x00;
003ee4 bdea      	OUT  0x2A,R30
                 ; 0000 00B4 OCR1BH=0x00;
003ee5 bde9      	OUT  0x29,R30
                 ; 0000 00B5 OCR1BL=0x00;
003ee6 bde8      	OUT  0x28,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // Timer/Counter 2 initialization
                 ; 0000 00B8 // Clock source: System Clock
                 ; 0000 00B9 // Clock value: Timer 2 Stopped
                 ; 0000 00BA // Mode: Normal top=FFh
                 ; 0000 00BB // OC2 output: Disconnected
                 ; 0000 00BC ASSR=0x00;
003ee7 bde2      	OUT  0x22,R30
                 ; 0000 00BD TCCR2=0x00;
003ee8 bde5      	OUT  0x25,R30
                 ; 0000 00BE TCNT2=0x00;
003ee9 bde4      	OUT  0x24,R30
                 ; 0000 00BF OCR2=0x00;
003eea bde3      	OUT  0x23,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // External Interrupt(s) initialization
                 ; 0000 00C2 // INT0: Off
                 ; 0000 00C3 // INT1: Off
                 ; 0000 00C4 MCUCR=0x00;
003eeb bfe5      	OUT  0x35,R30
                 ; 0000 00C5 
                 ; 0000 00C6 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C7 TIMSK=0x00;
003eec bfe9      	OUT  0x39,R30
                 ; 0000 00C8 
                 ; 0000 00C9 	// USART initialization Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00CA     // USART Receiver: On
                 ; 0000 00CB     // USART Transmitter: On
                 ; 0000 00CC 	UCSRA=0x00; UCSRC=0x86; UCSRB = (1<<TXEN) | (1<<RXEN);
003eed b9eb      	OUT  0xB,R30
003eee e8e6      	LDI  R30,LOW(134)
003eef bde0      	OUT  0x20,R30
003ef0 e1e8      	LDI  R30,LOW(24)
003ef1 b9ea      	OUT  0xA,R30
                 ; 0000 00CD     bauddiv = ((_MCU_CLOCK_FREQUENCY_ + (BAUDRATE * 8L))/(BAUDRATE * 16L) - 1);
                +
003ef2 e001     +LDI R16 , LOW ( 1 )
003ef3 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 00CE     UBRRL = (unsigned char)bauddiv;
003ef4 b909      	OUT  0x9,R16
                 ; 0000 00CF 	UBRRH = bauddiv >> 8;
003ef5 2fe1      	MOV  R30,R17
003ef6 70f0      	ANDI R31,HIGH(0x0)
003ef7 bde0      	OUT  0x20,R30
                 ; 0000 00D0 /*
                 ; 0000 00D1 // USART initialization
                 ; 0000 00D2 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00D3 // USART Receiver: On
                 ; 0000 00D4 // USART Transmitter: On
                 ; 0000 00D5 // USART Mode: Asynchronous
                 ; 0000 00D6 // USART Baud rate: 115200
                 ; 0000 00D7 UCSRA=0x00;
                 ; 0000 00D8 UCSRB=0xD8;
                 ; 0000 00D9 UCSRC=0x86;
                 ; 0000 00DA UBRRH=0x00;
                 ; 0000 00DB UBRRL=0x03;
                 ; 0000 00DC */
                 ; 0000 00DD 
                 ; 0000 00DE // Analog Comparator initialization
                 ; 0000 00DF // Analog Comparator: Off
                 ; 0000 00E0 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00E1 // Analog Comparator Output: Off
                 ; 0000 00E2 ACSR=0x80;
003ef8 e8e0      	LDI  R30,LOW(128)
003ef9 b9e8      	OUT  0x8,R30
                 ; 0000 00E3 SFIOR=0x00;
003efa e0e0      	LDI  R30,LOW(0)
003efb bfe0      	OUT  0x30,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // Global enable interrupts
                 ; 0000 00E6 #asm("sei")
003efc 9478      	sei
                 ; 0000 00E7 
                 ; 0000 00E8 while (1) {
                 _0x15:
                 ; 0000 00E9     while(rx_counter>0) {
                 _0x18:
003efd e0e0      	LDI  R30,LOW(0)
003efe 15e7      	CP   R30,R7
003eff f538      	BRSH _0x1A
                 ; 0000 00EA         indata = getchar();
003f00 df88      	RCALL _getchar
003f01 2ebe      	MOV  R11,R30
                 ; 0000 00EB         checklockcode=(checklockcode<<8)|indata;
003f02 940e 3f3b 	CALL SUBOPT_0x0
003f04 e0e8      	LDI  R30,LOW(8)
003f05 940e 3f55 	CALL __LSLD12
003f07 01df      	MOVW R26,R30
003f08 01cb      	MOVW R24,R22
003f09 2deb      	MOV  R30,R11
003f0a 27ff      	CLR  R31
003f0b 2766      	CLR  R22
003f0c 2777      	CLR  R23
003f0d 940e 3f50 	CALL __ORD12
003f0f 93e0 02a4 	STS  _checklockcode,R30
003f11 93f0 02a5 	STS  _checklockcode+1,R31
003f13 9360 02a6 	STS  _checklockcode+2,R22
003f15 9370 02a7 	STS  _checklockcode+3,R23
                 ; 0000 00EC         if (checklockcode==lockcode) {
003f17 91e0 02a0 	LDS  R30,_lockcode
003f19 91f0 02a1 	LDS  R31,_lockcode+1
003f1b 9160 02a2 	LDS  R22,_lockcode+2
003f1d 9170 02a3 	LDS  R23,_lockcode+3
003f1f 940e 3f3b 	CALL SUBOPT_0x0
003f21 940e 3f61 	CALL __CPD12
003f23 f411      	BRNE _0x1B
                 ; 0000 00ED             #asm("jmp 0xe00"); //flash size - boot sector size
003f24 940c 0e00 	jmp 0xe00
                 ; 0000 00EE         }
                 ; 0000 00EF     }
                 _0x1B:
003f26 cfd6      	RJMP _0x18
                 _0x1A:
                 ; 0000 00F0     delay_ms(100);
003f27 e6e4      	LDI  R30,LOW(100)
003f28 e0f0      	LDI  R31,HIGH(100)
003f29 93fa      	ST   -Y,R31
003f2a 93ea      	ST   -Y,R30
003f2b 940e 3f44 	CALL _delay_ms
                 ; 0000 00F1     PORTA.2 = !PORTA.2; //flash a led
003f2d 9bda      	SBIS 0x1B,2
003f2e c002      	RJMP _0x1C
003f2f 98da      	CBI  0x1B,2
003f30 c001      	RJMP _0x1D
                 _0x1C:
003f31 9ada      	SBI  0x1B,2
                 _0x1D:
                 ; 0000 00F2     PORTA.3 = !PORTA.3;
003f32 9bdb      	SBIS 0x1B,3
003f33 c002      	RJMP _0x1E
003f34 98db      	CBI  0x1B,3
003f35 c001      	RJMP _0x1F
                 _0x1E:
003f36 9adb      	SBI  0x1B,3
                 _0x1F:
                 ; 0000 00F3     putchar(dot);
003f37 933a      	ST   -Y,R19
003f38 df7a      	RCALL _putchar
                 ; 0000 00F4 }
003f39 cfc3      	RJMP _0x15
                 ; 0000 00F5 }
                 _0x20:
003f3a cfff      	RJMP _0x20
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000260           	.BYTE 0x20
                 _tx_buffer:
000280           	.BYTE 0x20
                 _lockcode:
0002a0           	.BYTE 0x4
                 _checklockcode:
0002a4           	.BYTE 0x4
                 _p_S1020024:
0002a8           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
003f3b 91a0 02a4 	LDS  R26,_checklockcode
003f3d 91b0 02a5 	LDS  R27,_checklockcode+1
003f3f 9180 02a6 	LDS  R24,_checklockcode+2
003f41 9190 02a7 	LDS  R25,_checklockcode+3
003f43 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
003f44 91e9      	ld   r30,y+
003f45 91f9      	ld   r31,y+
003f46 9630      	adiw r30,0
003f47 f039      	breq __delay_ms1
                 __delay_ms0:
                +
003f48 e98a     +LDI R24 , LOW ( 0x39A )
003f49 e093     +LDI R25 , HIGH ( 0x39A )
                +__DELAY_USW_LOOP :
003f4a 9701     +SBIW R24 , 1
003f4b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x39A
003f4c 95a8      	wdr
003f4d 9731      	sbiw r30,1
003f4e f7c9      	brne __delay_ms0
                 __delay_ms1:
003f4f 9508      	ret
                 
                 __ORD12:
003f50 2bea      	OR   R30,R26
003f51 2bfb      	OR   R31,R27
003f52 2b68      	OR   R22,R24
003f53 2b79      	OR   R23,R25
003f54 9508      	RET
                 
                 __LSLD12:
003f55 23ee      	TST  R30
003f56 2e0e      	MOV  R0,R30
003f57 01fd      	MOVW R30,R26
003f58 01bc      	MOVW R22,R24
003f59 f031      	BREQ __LSLD12R
                 __LSLD12L:
003f5a 0fee      	LSL  R30
003f5b 1fff      	ROL  R31
003f5c 1f66      	ROL  R22
003f5d 1f77      	ROL  R23
003f5e 940a      	DEC  R0
003f5f f7d1      	BRNE __LSLD12L
                 __LSLD12R:
003f60 9508      	RET
                 
                 __CPD12:
003f61 17ea      	CP   R30,R26
003f62 07fb      	CPC  R31,R27
003f63 0768      	CPC  R22,R24
003f64 0779      	CPC  R23,R25
003f65 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   6 r1 :   1 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   6 
r8 :   5 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:  10 r18:   0 r19:   2 r20:   0 r21:   0 r22:  10 r23:   6 
r24:  14 r25:   6 r26:  10 r27:   5 r28:   2 r29:   1 r30: 111 r31:  28 
x  :   3 y  :  22 z  :  11 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
adc   :   0 add   :   0 adiw  :   2 and   :   0 andi  :   2 asr   :   0 
bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :   6 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 
brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  :   6 cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 
cli   :   3 cln   :   0 clr   :  10 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   8 cpc   :   3 cpi   :   0 cpse  :   0 
dec   :   4 des   :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   4 inc   :   6 jmp   :  23 ld    :  12 
ldd   :   0 ldi   :  42 lds   :   8 lpm   :   7 lsl   :   1 lsr   :   0 
mov   :  10 movw  :   7 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 
nop   :   0 or    :   4 ori   :   0 out   :  44 pop   :   0 push  :   0 
rcall :   2 ret   :   7 reti  :   1 rjmp  :  11 rol   :   3 ror   :   0 
sbc   :   0 sbci  :   4 sbi   :   2 sbic  :   1 sbis  :   2 sbiw  :   5 
sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   3 
sen   :   0 ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 
sleep :   0 spm   :   0 st    :  16 std   :   1 sts   :   4 sub   :   0 
subi  :   4 swap  :   0 tst   :   4 wdr   :   1 
Instructions used: 43 out of 112 (38.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x007c00 0x007ecc    686     30    716   32768   2.2%
[.dseg] 0x000060 0x0002aa      0     74     74    2048   3.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
