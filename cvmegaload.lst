
AVRASM ver. 2.1.17  D:\MTECH\Контроллер\BootLoader\codevision\cvmegaload.asm Tue Jul 03 13:18:15 2012

D:\MTECH\Контроллер\BootLoader\codevision\cvmegaload.asm(1016): warning: Register r4 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmegaload.asm(1017): warning: Register r6 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmegaload.asm(1018): warning: Register r8 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmegaload.asm(1019): warning: Register r10 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmegaload.asm(1020): warning: Register r11 already defined by the .DEF directive
D:\MTECH\Контроллер\BootLoader\codevision\cvmegaload.asm(1021): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.9 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega32
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 3,686400 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : Yes
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _PageAddress=R4
                 	.DEF _CurrentAddress=R6
                 	.DEF _inchar=R8
                 	.DEF _spmcrval=R10
                 	.DEF _i=R11
                 	.DEF _j=R13
                 
                 	.CSEG
                 	.ORG 0x3E00
                 
                 ;INTERRUPT VECTORS
003e00 940c 3e33 	JMP  __RESET
003e02 940c 3e00 	JMP  0x3E00
003e04 940c 3e00 	JMP  0x3E00
003e06 940c 3e00 	JMP  0x3E00
003e08 940c 3e00 	JMP  0x3E00
003e0a 940c 3e00 	JMP  0x3E00
003e0c 940c 3e00 	JMP  0x3E00
003e0e 940c 3e00 	JMP  0x3E00
003e10 940c 3e00 	JMP  0x3E00
003e12 940c 3e00 	JMP  0x3E00
003e14 940c 3e00 	JMP  0x3E00
003e16 940c 3e00 	JMP  0x3E00
003e18 940c 3e00 	JMP  0x3E00
003e1a 940c 3e00 	JMP  0x3E00
003e1c 940c 3e00 	JMP  0x3E00
003e1e 940c 3e00 	JMP  0x3E00
003e20 940c 3e00 	JMP  0x3E00
003e22 940c 3e00 	JMP  0x3E00
003e24 940c 3e00 	JMP  0x3E00
003e26 940c 3e00 	JMP  0x3E00
003e28 940c 3e00 	JMP  0x3E00
                 
                 _tbl10_G100:
003e2a 2710
003e2b 03e8
003e2c 0064
003e2d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
003e2e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
003e2f 1000
003e30 0100
003e31 0010
003e32 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
003e33 94f8      	CLI
003e34 27ee      	CLR  R30
003e35 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
003e36 e0f1      	LDI  R31,1
003e37 bffb      	OUT  GICR,R31
003e38 e0f2      	LDI  R31,2
003e39 bffb      	OUT  GICR,R31
003e3a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
003e3b e1f8      	LDI  R31,0x18
003e3c bdf1      	OUT  WDTCR,R31
003e3d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
003e3e e08d      	LDI  R24,(14-2)+1
003e3f e0a2      	LDI  R26,2
003e40 27bb      	CLR  R27
                 __CLEAR_REG:
003e41 93ed      	ST   X+,R30
003e42 958a      	DEC  R24
003e43 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
003e44 e080      	LDI  R24,LOW(0x800)
003e45 e098      	LDI  R25,HIGH(0x800)
003e46 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
003e47 93ed      	ST   X+,R30
003e48 9701      	SBIW R24,1
003e49 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;STACK POINTER INITIALIZATION
003e4a e5ef      	LDI  R30,LOW(0x85F)
003e4b bfed      	OUT  SPL,R30
003e4c e0e8      	LDI  R30,HIGH(0x85F)
003e4d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
003e4e e6c0      	LDI  R28,LOW(0x260)
003e4f e0d2      	LDI  R29,HIGH(0x260)
                 
003e50 940c 3f34 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project :   CVMegaload
                 ;Version :   1.00
                 ;Date    : 14/05/2004
                 ;Author  : Ralph Hilton
                 ;Chip type           : ATmega
                 ;Program type        : Bootloader
                 ;Clock frequency     : 7.372800 MHz
                 ;Data Stack size     : 256
                 ;Acknowledgement  : Modified from original code by Sylvain Bissonnette
                 ;*****************************************************/
                 ;/*****************************************************
                 ;Note: BAUDRATE must be correctly defined below
                 ;Supported values are
                 ;9600 19200 38400 57600 115200
                 ;Chip header is included by cvmegaload.h from the project configuration
                 ;// The project should be compiled with the following compiler options:
                 ;// Promote char to int
                 ;// Char is unsigned
                 ;// Bit variables 0
                 ;*****************************************************/
                 ;//uncomment to use UART1
                 ;//#define UART1
                 ;
                 ;#pragma promotechar+
                 ;#pragma uchar+
                 ;#pragma regalloc-
                 ;#pragma optsize+
                 ;
                 ;#ifdef UART1
                 ;#include <cvmegaloaduart1.h> //contains defines for DeviceID FlashSize BootSize PageSize AddressLshift
                 ;#else
                 ;#include <cvmegaload.h> //contains defines for DeviceID FlashSize BootSize PageSize AddressLshift
                 	.EQU SpmcrAddr=0x57
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#endif
                 ;
                 ;#include <stdio.h>
                 ;#define BAUDRATE 115200
                 ;//#define BAUDRATE 9600
                 ;register unsigned int Pagedata @2; //program data to be written from this and read back for checking
                 ;register unsigned int PageAddress @4; //address of the page
                 ;register unsigned int CurrentAddress @6; //address of the current data -  PageAddress + loop counter
                 ;register char inchar @8; //data received from RS232
                 ;register char spmcrval @10; //value to write to SPM control register
                 ;register unsigned int i @11;   //loop counter
                 ;register unsigned int j @13;  //loop counter
                 ;unsigned int ubbr;
                 ;unsigned int Checkdata ; //compared with Pagedata for checking
                 ;char PageBuffer[PageByte]; //buffer for data to be written
                 ;
                 ;#ifdef UART1
                 ;
                 ;#define getchar getchar1
                 ;#define putchar putchar1
                 ;
                 ;// Get a character from the USART1 Receiver
                 ;#pragma used+
                 ;char getchar(void) {
                 ;    char status,data;
                 ;
                 ;    while (1) {
                 ;        while (((status=UCSRA) & 128)==0);
                 ;        data=UDR1;
                 ;        if ((status & (28))==0) return data;
                 ;    };
                 ;}
                 ;#pragma used-
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while ((UCSRA & 32)==0);
                 ;UDR1=c;
                 ;}
                 ;#pragma used-
                 ;
                 ;#endif
                 ;
                 ;char GetPage(void)
                 ; 0000 0050 {
                 
                 	.CSEG
                 _GetPage:
                 ; 0000 0051 char LocalCheckSum = 0;
                 ; 0000 0052 char CheckSum = 0;
                 ; 0000 0053 // The programming software generates a simple checksum in the
                 ; 0000 0054 // same fashion as below to check for data transmission errors
                 ; 0000 0055 for (j=0;j<PageByte;j++)
003e52 931a      	ST   -Y,R17
003e53 930a      	ST   -Y,R16
                 ;	LocalCheckSum -> R17
                 ;	CheckSum -> R16
003e54 e010      	LDI  R17,0
003e55 e000      	LDI  R16,0
003e56 24dd      	CLR  R13
003e57 24ee      	CLR  R14
                 _0x4:
003e58 e8e0      	LDI  R30,LOW(128)
003e59 e0f0      	LDI  R31,HIGH(128)
003e5a 16de      	CP   R13,R30
003e5b 06ef      	CPC  R14,R31
003e5c f4d8      	BRSH _0x5
                 ; 0000 0056     {
                 ; 0000 0057     PageBuffer[j]=getchar();
                +
003e5d 2ded     +MOV R30 , R13
003e5e 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
003e5f 59ec      	SUBI R30,LOW(-_PageBuffer)
003e60 4ffd      	SBCI R31,HIGH(-_PageBuffer)
003e61 93ff      	PUSH R31
003e62 93ef      	PUSH R30
003e63 940e 3f6b 	CALL _getchar
003e65 91af      	POP  R26
003e66 91bf      	POP  R27
003e67 93ec      	ST   X,R30
                 ; 0000 0058     LocalCheckSum += PageBuffer[j];
003e68 2e01      	MOV  R0,R17
003e69 2411      	CLR  R1
003e6a e6a4      	LDI  R26,LOW(_PageBuffer)
003e6b e0b2      	LDI  R27,HIGH(_PageBuffer)
003e6c 0dad      	ADD  R26,R13
003e6d 1dbe      	ADC  R27,R14
003e6e 91ec      	LD   R30,X
003e6f e0f0      	LDI  R31,0
003e70 01d0      	MOVW R26,R0
003e71 0fea      	ADD  R30,R26
003e72 2f1e      	MOV  R17,R30
                 ; 0000 0059     }
003e73 e0e1      	LDI  R30,LOW(1)
003e74 e0f0      	LDI  R31,HIGH(1)
                +
003e75 0ede     +ADD R13 , R30
003e76 1eef     +ADC R14 , R31
                 	__ADDWRR 13,14,30,31
003e77 cfe0      	RJMP _0x4
                 _0x5:
                 ; 0000 005A CheckSum = getchar();
003e78 940e 3f6b 	CALL _getchar
003e7a 2f0e      	MOV  R16,R30
                 ; 0000 005B if (LocalCheckSum == CheckSum) return 1;
003e7b 1701      	CP   R16,R17
003e7c f411      	BRNE _0x6
003e7d e0e1      	LDI  R30,LOW(1)
003e7e c001      	RJMP _0x2060001
                 ; 0000 005C else return 0;
                 _0x6:
003e7f e0e0      	LDI  R30,LOW(0)
                 ; 0000 005D }
                 _0x2060001:
003e80 9109      	LD   R16,Y+
003e81 9119      	LD   R17,Y+
003e82 9508      	RET
                 ;
                 ;char CheckFlash(void)
                 ; 0000 0060 {
                 _CheckFlash:
                 ; 0000 0061 //After the data has been written to flash it is read back and compared to the original
                 ; 0000 0062 for (j=0;j<PageByte;j+=2)
003e83 24dd      	CLR  R13
003e84 24ee      	CLR  R14
                 _0x9:
003e85 e8e0      	LDI  R30,LOW(128)
003e86 e0f0      	LDI  R31,HIGH(128)
003e87 16de      	CP   R13,R30
003e88 06ef      	CPC  R14,R31
003e89 f500      	BRSH _0xA
                 ; 0000 0063     {
                 ; 0000 0064     CurrentAddress=PageAddress+j;
                +
003e8a 2ded     +MOV R30 , R13
003e8b 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
003e8c 0de4      	ADD  R30,R4
003e8d 1df5      	ADC  R31,R5
003e8e 013f      	MOVW R6,R30
                 ; 0000 0065     #if defined _CHIP_ATMEGA128_
                 ; 0000 0066     #asm
                 ; 0000 0067     movw r30, r6       ;//move  CurrentAddress to Z pointer
                 ; 0000 0068     elpm r2, Z+         ;//read LSB
                 ; 0000 0069     elpm r3, Z           ;//read MSB
                 ; 0000 006A     #endasm
                 ; 0000 006B     #else
                 ; 0000 006C     #asm
                 ; 0000 006D     movw r30, r6       ;//move  CurrentAddress to Z pointer
003e8f 01f3          movw r30, r6       ;//move  CurrentAddress to Z pointer
                 ; 0000 006E     lpm r2, Z+          ;//read LSB
003e90 9025          lpm r2, Z+          ;//read LSB
                 ; 0000 006F     lpm r3, Z            ;//read MSB
003e91 9034          lpm r3, Z            ;//read MSB
                 ; 0000 0070     #endasm
                 ; 0000 0071     #endif
                 ; 0000 0072     Checkdata = PageBuffer[j] +(PageBuffer[j+1]<<8);
003e92 e6a4      	LDI  R26,LOW(_PageBuffer)
003e93 e0b2      	LDI  R27,HIGH(_PageBuffer)
003e94 0dad      	ADD  R26,R13
003e95 1dbe      	ADC  R27,R14
003e96 91ac      	LD   R26,X
003e97 27bb      	CLR  R27
                +
003e98 2ded     +MOV R30 , R13
003e99 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
003e9a 940e 3f75 	CALL SUBOPT_0x0
003e9c 93e0 0262 	STS  _Checkdata,R30
003e9e 93f0 0263 	STS  _Checkdata+1,R31
                 ; 0000 0073     if (Pagedata != Checkdata) return 0;
003ea0 15e2      	CP   R30,R2
003ea1 05f3      	CPC  R31,R3
003ea2 f011      	BREQ _0xB
003ea3 e0e0      	LDI  R30,LOW(0)
003ea4 9508      	RET
                 ; 0000 0074     }
                 _0xB:
003ea5 e0e2      	LDI  R30,LOW(2)
003ea6 e0f0      	LDI  R31,HIGH(2)
                +
003ea7 0ede     +ADD R13 , R30
003ea8 1eef     +ADC R14 , R31
                 	__ADDWRR 13,14,30,31
003ea9 cfdb      	RJMP _0x9
                 _0xA:
                 ; 0000 0075 return 1;
003eaa e0e1      	LDI  R30,LOW(1)
003eab 9508      	RET
                 ; 0000 0076 }
                 ;
                 ;void ExecCode(void)
                 ; 0000 0079 {
                 _ExecCode:
                 ; 0000 007A #if defined _CHIP_ATMEGA128_
                 ; 0000 007B RAMPZ =  0;
                 ; 0000 007C #endif
                 ; 0000 007D MCUCR = 0x01;	       // Enable interrupt vector select
003eac e0e1      	LDI  R30,LOW(1)
003ead bfe5      	OUT  0x35,R30
                 ; 0000 007E MCUCR = 0x00;	       // Move interrupt vector to flash
003eae e0e0      	LDI  R30,LOW(0)
003eaf bfe5      	OUT  0x35,R30
                 ; 0000 007F #asm("jmp 0x00"); // Run application code
003eb0 940c 0000 	jmp 0x00
                 ; 0000 0080 }
003eb2 9508      	RET
                 ;
                 ;void BootLoad(void) {
                 ; 0000 0082 void BootLoad(void) {
                 _BootLoad:
                 ; 0000 0083     // Send chip data to the programming software so that it knows
                 ; 0000 0084     // how to format transmissions
                 ; 0000 0085     putchar(DeviceID);
003eb3 e4e5      	LDI  R30,LOW(69)
003eb4 93ea      	ST   -Y,R30
003eb5 940e 3f6f 	CALL _putchar
                 ; 0000 0086     putchar(FlashSize);
003eb7 e6ee      	LDI  R30,LOW(110)
003eb8 93ea      	ST   -Y,R30
003eb9 940e 3f6f 	CALL _putchar
                 ; 0000 0087     putchar(BootSize);
003ebb e6e3      	LDI  R30,LOW(99)
003ebc 93ea      	ST   -Y,R30
003ebd 940e 3f6f 	CALL _putchar
                 ; 0000 0088     putchar(PageSize);
003ebf e5e3      	LDI  R30,LOW(83)
003ec0 93ea      	ST   -Y,R30
003ec1 940e 3f6f 	CALL _putchar
                 ; 0000 0089     putchar(EEPromSize);
003ec3 e3e2      	LDI  R30,LOW(50)
003ec4 93ea      	ST   -Y,R30
003ec5 940e 3f6f 	CALL _putchar
                 ; 0000 008A     // "!" means all ok and send the next data if there is more
                 ; 0000 008B     putchar('!');
003ec7 e2e1      	LDI  R30,LOW(33)
003ec8 93ea      	ST   -Y,R30
003ec9 940e 3f6f 	CALL _putchar
                 ; 0000 008C     while(1) {
                 _0xC:
                 ; 0000 008D         PageAddress = (unsigned int)getchar() << 8;  // Receive PageAddress high byte
003ecb 940e 3f6b 	CALL _getchar
003ecd 2ffe      	MOV  R31,R30
003ece e0e0      	LDI  R30,0
003ecf 012f      	MOVW R4,R30
                 ; 0000 008E         PageAddress += getchar();   // Add PageAddress low byte
003ed0 940e 3f6b 	CALL _getchar
003ed2 e0f0      	LDI  R31,0
                +
003ed3 0e4e     +ADD R4 , R30
003ed4 1e5f     +ADC R5 , R31
                 	__ADDWRR 4,5,30,31
                 ; 0000 008F         if (PageAddress == 0xffff) ExecCode(); // The windows program sends this value when finished
003ed5 efef      	LDI  R30,LOW(65535)
003ed6 efff      	LDI  R31,HIGH(65535)
003ed7 15e4      	CP   R30,R4
003ed8 05f5      	CPC  R31,R5
003ed9 f409      	BRNE _0xF
003eda dfd1      	RCALL _ExecCode
                 ; 0000 0090         #if defined _CHIP_ATMEGA128_
                 ; 0000 0091         if (PageAddress >> 8) RAMPZ =  1; else RAMPZ=0;
                 ; 0000 0092         #endif
                 ; 0000 0093         PageAddress = PageAddress << AddressLshift; //essentially the same as multiply by PageSize
                 _0xF:
003edb 01d2      	MOVW R26,R4
003edc e0e7      	LDI  R30,LOW(7)
003edd 940e 3f7c 	CALL __LSLW12
003edf 012f      	MOVW R4,R30
                 ; 0000 0094         if (GetPage()) {//receive one page of data followed by a checksum byte and verify data
003ee0 df71      	RCALL _GetPage
003ee1 30e0      	CPI  R30,0
003ee2 f411      	BRNE PC+3
003ee3 940c 3f30 	JMP _0x10
                 ; 0000 0095 
                 ; 0000 0096             for (i=0;i<PageByte;i+=2) //fill temporary buffer in 2 byte chunks from PageBuffer
003ee5 24bb      	CLR  R11
003ee6 24cc      	CLR  R12
                 _0x12:
003ee7 e8e0      	LDI  R30,LOW(128)
003ee8 e0f0      	LDI  R31,HIGH(128)
003ee9 16be      	CP   R11,R30
003eea 06cf      	CPC  R12,R31
003eeb f500      	BRSH _0x13
                 ; 0000 0097 
                 ; 0000 0098                 {
                 ; 0000 0099                 Pagedata=PageBuffer[i]+(PageBuffer[i+1]<<8);
003eec e6a4      	LDI  R26,LOW(_PageBuffer)
003eed e0b2      	LDI  R27,HIGH(_PageBuffer)
003eee 0dab      	ADD  R26,R11
003eef 1dbc      	ADC  R27,R12
003ef0 91ac      	LD   R26,X
003ef1 27bb      	CLR  R27
                +
003ef2 2deb     +MOV R30 , R11
003ef3 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
003ef4 940e 3f75 	CALL SUBOPT_0x0
003ef6 011f      	MOVW R2,R30
                 ; 0000 009A                 while (SPMCR&1); //wait for spm complete
                 _0x14:
003ef7 b7e7      	IN   R30,0x37
003ef8 fde0      	SBRC R30,0
003ef9 cffd      	RJMP _0x14
                 ; 0000 009B                 CurrentAddress=PageAddress+i;
                +
003efa 2deb     +MOV R30 , R11
003efb 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
003efc 0de4      	ADD  R30,R4
003efd 1df5      	ADC  R31,R5
003efe 013f      	MOVW R6,R30
                 ; 0000 009C                 spmcrval=1;
003eff e0e1      	LDI  R30,LOW(1)
003f00 2eae      	MOV  R10,R30
                 ; 0000 009D                 #asm
                 ; 0000 009E                 movw r30, r6    ;//move CurrentAddress to Z pointer
003f01 01f3                      movw r30, r6    ;//move CurrentAddress to Z pointer
                 ; 0000 009F                 mov r1, r3        ;//move Pagedata MSB reg 1
003f02 2c13                      mov r1, r3        ;//move Pagedata MSB reg 1
                 ; 0000 00A0                 mov r0, r2        ;//move Pagedata LSB reg 1
003f03 2c02                      mov r0, r2        ;//move Pagedata LSB reg 1
                 ; 0000 00A1                 sts SpmcrAddr, r10   ;//move spmcrval to SPM control register
003f04 92a0 0057                 sts SpmcrAddr, r10   ;//move spmcrval to SPM control register
                 ; 0000 00A2                 spm                ;//store program memory
003f06 95e8                      spm                ;//store program memory
                 ; 0000 00A3                 #endasm
                 ; 0000 00A4                 }
003f07 e0e2      	LDI  R30,LOW(2)
003f08 e0f0      	LDI  R31,HIGH(2)
                +
003f09 0ebe     +ADD R11 , R30
003f0a 1ecf     +ADC R12 , R31
                 	__ADDWRR 11,12,30,31
003f0b cfdb      	RJMP _0x12
                 _0x13:
                 ; 0000 00A5 
                 ; 0000 00A6             while (SPMCR&1);  //wait for spm complete
                 _0x17:
003f0c b7e7      	IN   R30,0x37
003f0d fde0      	SBRC R30,0
003f0e cffd      	RJMP _0x17
                 ; 0000 00A7             spmcrval=3;        //erase page
003f0f e0e3      	LDI  R30,LOW(3)
003f10 2eae      	MOV  R10,R30
                 ; 0000 00A8             #asm
                 ; 0000 00A9             movw r30, r4       ;//move PageAddress to Z pointer
003f11 01f2                  movw r30, r4       ;//move PageAddress to Z pointer
                 ; 0000 00AA             sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
003f12 92a0 0057             sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
                 ; 0000 00AB             spm                 ;//erase page
003f14 95e8                  spm                 ;//erase page
                 ; 0000 00AC             #endasm
                 ; 0000 00AD 
                 ; 0000 00AE             while (SPMCR&1); //wait for spm complete
                 _0x1A:
003f15 b7e7      	IN   R30,0x37
003f16 fde0      	SBRC R30,0
003f17 cffd      	RJMP _0x1A
                 ; 0000 00AF             spmcrval=5;        //write page
003f18 e0e5      	LDI  R30,LOW(5)
003f19 2eae      	MOV  R10,R30
                 ; 0000 00B0             #asm
                 ; 0000 00B1             movw r30, r4       ;//move PageAddress to Z pointer
003f1a 01f2                  movw r30, r4       ;//move PageAddress to Z pointer
                 ; 0000 00B2             sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
003f1b 92a0 0057             sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
                 ; 0000 00B3             spm                 ;//write page
003f1d 95e8                  spm                 ;//write page
                 ; 0000 00B4             #endasm
                 ; 0000 00B5 
                 ; 0000 00B6             while (SPMCR&1);  //wait for spm complete
                 _0x1D:
003f1e b7e7      	IN   R30,0x37
003f1f fde0      	SBRC R30,0
003f20 cffd      	RJMP _0x1D
                 ; 0000 00B7             spmcrval=0x11;   //enableRWW  see mega8 datasheet for explanation
003f21 e1e1      	LDI  R30,LOW(17)
003f22 2eae      	MOV  R10,R30
                 ; 0000 00B8              // P. 212 Section "Prevent reading the RWW section
                 ; 0000 00B9              // during self-programming
                 ; 0000 00BA             #asm
                 ; 0000 00BB             sts SpmcrAddr, r10   ;//move spmcrval to SPMCR
003f23 92a0 0057             sts SpmcrAddr, r10   ;//move spmcrval to SPMCR
                 ; 0000 00BC             spm
003f25 95e8                  spm
                 ; 0000 00BD             #endasm
                 ; 0000 00BE              if (CheckFlash()) putchar('!');  //all ok, send next page
003f26 940e 3e83 	CALL _CheckFlash
003f28 30e0      	CPI  R30,0
003f29 f011      	BREQ _0x20
003f2a e2e1      	LDI  R30,LOW(33)
003f2b c001      	RJMP _0x29
                 ; 0000 00BF              else putchar('@'); //there was an error, resend page
                 _0x20:
003f2c e4e0      	LDI  R30,LOW(64)
                 _0x29:
003f2d 93ea      	ST   -Y,R30
003f2e d040      	RCALL _putchar
                 ; 0000 00C0           //end if (GetPage())
                 ; 0000 00C1         } else
003f2f c003      	RJMP _0x22
                 _0x10:
                 ; 0000 00C2             putchar('@');  //there was an error ,resend page
003f30 e4e0      	LDI  R30,LOW(64)
003f31 93ea      	ST   -Y,R30
003f32 d03c      	RCALL _putchar
                 ; 0000 00C3     }
                 _0x22:
003f33 cf97      	RJMP _0xC
                 ; 0000 00C4 }
                 ;
                 ;void main(void)
                 ; 0000 00C7 {
                 _main:
                 ; 0000 00C8 // USART initialization
                 ; 0000 00C9 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00CA // USART Receiver: On
                 ; 0000 00CB // USART Transmitter: On
                 ; 0000 00CC // USART Mode: Asynchronous
                 ; 0000 00CD // USART Baud rate: 9600
                 ; 0000 00CE UCSRA=0x00;
003f34 e0e0      	LDI  R30,LOW(0)
003f35 b9eb      	OUT  0xB,R30
                 ; 0000 00CF UCSRB=0x18;
003f36 e1e8      	LDI  R30,LOW(24)
003f37 b9ea      	OUT  0xA,R30
                 ; 0000 00D0 UCSRC=0x86;
003f38 e8e6      	LDI  R30,LOW(134)
003f39 bde0      	OUT  0x20,R30
                 ; 0000 00D1 //UBRRH=0x00;
                 ; 0000 00D2 //UBRRL=0x2F;
                 ; 0000 00D3 
                 ; 0000 00D4 ubbr = (unsigned long int)_MCU_CLOCK_FREQUENCY_ / (BAUDRATE * 16) - 1;
003f3a e0e1      	LDI  R30,LOW(1)
003f3b e0f0      	LDI  R31,HIGH(1)
003f3c 93e0 0260 	STS  _ubbr,R30
003f3e 93f0 0261 	STS  _ubbr+1,R31
                 ; 0000 00D5 UBRRH=ubbr >> 8;
003f40 91e0 0261 	LDS  R30,_ubbr+1
003f42 70f0      	ANDI R31,HIGH(0x0)
003f43 bde0      	OUT  0x20,R30
                 ; 0000 00D6 UBRRL = ubbr;
003f44 91e0 0260 	LDS  R30,_ubbr
003f46 91f0 0261 	LDS  R31,_ubbr+1
003f48 b9e9      	OUT  0x9,R30
                 ; 0000 00D7 
                 ; 0000 00D8 putchar('>'); //I'm here, talk to me
003f49 e3ee      	LDI  R30,LOW(62)
003f4a 93ea      	ST   -Y,R30
003f4b d023      	RCALL _putchar
                 ; 0000 00D9 
                 ; 0000 00DA while ( (! (UCSRA&128)) &( i < 32000) ) i++; //wait for data in or timeout
                 _0x23:
003f4c b1eb      	IN   R30,0xB
003f4d 78e0      	ANDI R30,LOW(0x80)
003f4e 940e 3f8b 	CALL __LNEGB1
003f50 2e0e      	MOV  R0,R30
                +
003f51 2dab     +MOV R26 , R11
003f52 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
003f53 e0e0      	LDI  R30,LOW(32000)
003f54 e7fd      	LDI  R31,HIGH(32000)
003f55 940e 3f85 	CALL __LTW12U
003f57 21e0      	AND  R30,R0
003f58 f029      	BREQ _0x25
003f59 e0e1      	LDI  R30,LOW(1)
003f5a e0f0      	LDI  R31,HIGH(1)
                +
003f5b 0ebe     +ADD R11 , R30
003f5c 1ecf     +ADC R12 , R31
                 	__ADDWRR 11,12,30,31
003f5d cfee      	RJMP _0x23
                 _0x25:
                 ; 0000 00DB if (i < 32000)  inchar= getchar();
003f5e e0e0      	LDI  R30,LOW(32000)
003f5f e7fd      	LDI  R31,HIGH(32000)
003f60 16be      	CP   R11,R30
003f61 06cf      	CPC  R12,R31
003f62 f410      	BRSH _0x26
003f63 d007      	RCALL _getchar
003f64 2e8e      	MOV  R8,R30
                 ; 0000 00DC 
                 ; 0000 00DD if (inchar == '<') BootLoad(); // I'm here too, go ahead and load the program to flash
                 _0x26:
003f65 e3ec      	LDI  R30,LOW(60)
003f66 15e8      	CP   R30,R8
003f67 f409      	BRNE _0x27
003f68 df4a      	RCALL _BootLoad
                 ; 0000 00DE ExecCode();  // set up and jump to application
                 _0x27:
003f69 df42      	RCALL _ExecCode
                 ; 0000 00DF }
                 _0x28:
003f6a cfff      	RJMP _0x28
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
003f6b 9b5f           sbis usr,rxc
003f6c cffe           rjmp _getchar
003f6d b1ec           in   r30,udr
003f6e 9508      	RET
                 _putchar:
003f6f 9b5d           sbis usr,udre
003f70 cffe           rjmp _putchar
003f71 81e8           ld   r30,y
003f72 b9ec           out  udr,r30
003f73 9621      	ADIW R28,1
003f74 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _ubbr:
000260           	.BYTE 0x2
                 _Checkdata:
000262           	.BYTE 0x2
                 _PageBuffer:
000264           	.BYTE 0x80
                 _p_S1020024:
0002e4           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
003f75 59eb     +SUBI R30 , LOW ( - _PageBuffer - ( 1 ) )
003f76 4ffd     +SBCI R31 , HIGH ( - _PageBuffer - ( 1 ) )
                 	__ADDW1MN _PageBuffer,1
003f77 81f0      	LD   R31,Z
003f78 e0e0      	LDI  R30,LOW(0)
003f79 0fea      	ADD  R30,R26
003f7a 1ffb      	ADC  R31,R27
003f7b 9508      	RET
                 
                 
                 	.CSEG
                 __LSLW12:
003f7c 23ee      	TST  R30
003f7d 2e0e      	MOV  R0,R30
003f7e 01fd      	MOVW R30,R26
003f7f f021      	BREQ __LSLW12R
                 __LSLW12L:
003f80 0fee      	LSL  R30
003f81 1fff      	ROL  R31
003f82 940a      	DEC  R0
003f83 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
003f84 9508      	RET
                 
                 __LTW12U:
003f85 17ae      	CP   R26,R30
003f86 07bf      	CPC  R27,R31
003f87 e0e1      	LDI  R30,1
003f88 f008      	BRLO __LTW12UT
003f89 27ee      	CLR  R30
                 __LTW12UT:
003f8a 9508      	RET
                 
                 __LNEGB1:
003f8b 23ee      	TST  R30
003f8c e0e1      	LDI  R30,1
003f8d f009      	BREQ __LNEGB1F
003f8e 27ee      	CLR  R30
                 __LNEGB1F:
003f8f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   7 r1 :   2 r2 :   4 r3 :   3 r4 :   9 r5 :   4 r6 :   4 r7 :   0 
r8 :   2 r9 :   0 r10:   8 r11:   9 r12:   9 r13:  11 r14:  11 r15:   0 
r16:   5 r17:   6 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   4 r25:   1 r26:  18 r27:  13 r28:   2 r29:   1 r30: 138 r31:  49 
x  :   6 y  :  14 z  :   3 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
adc   :  11 add   :  12 adiw  :   1 and   :   1 andi  :   2 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :   5 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :   7 brpl  :   0 
brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  :  16 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   1 cln   :   0 clr   :  13 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   9 cpc   :   7 cpi   :   2 cpse  :   0 
dec   :   2 des   :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   6 inc   :   0 jmp   :  24 ld    :   7 
ldd   :   0 ldi   :  73 lds   :   3 lpm   :   3 lsl   :   1 lsr   :   0 
mov   :  25 movw  :  12 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 
nop   :   0 or    :   0 ori   :   0 out   :  16 pop   :   2 push  :   2 
rcall :   8 ret   :  10 reti  :   0 rjmp  :  15 rol   :   1 ror   :   0 
sbc   :   0 sbci  :   2 sbi   :   0 sbic  :   0 sbis  :   2 sbiw  :   1 
sbr   :   0 sbrc  :   4 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 
sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 
sleep :   0 spm   :   8 st    :  14 std   :   0 sts   :   8 sub   :   0 
subi  :   2 swap  :   0 tst   :   2 wdr   :   0 
Instructions used: 41 out of 112 (36.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x007c00 0x007f20    782     18    800   32768   2.4%
[.dseg] 0x000060 0x0002e6      0    134    134    2048   6.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
